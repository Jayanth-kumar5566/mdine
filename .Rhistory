l1 = lay1
}
if (is.null(E(g0)$weight)) {
lwd0 <- 0
} else {
lwd0 <- abs(E(g0)$weight)*scale_line_width
}
if (is.null(E(g1)$weight)) {
lwd1 <- 0
} else {
lwd1 <- abs(E(g1)$weight)*scale_line_width
}
layout(matrix(c(1,2,3,3), ncol=2, byrow=TRUE), heights=c(6, 0.5), widths=c(6,6,1.5))
par(mai=rep(0.2, 4))
plot.igraph(g0, layout=l1,
edge.width=lwd0, main=lab0,
vertex.size=vertex.size0, vertex.shape="circle",
vertex.label=vertex.labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
par(mai=rep(0.2, 4))
plot.igraph(g1, layout=l1,
edge.width=lwd1, main=lab1,
vertex.size=vertex.size1, vertex.shape="circle",
vertex.label=vertex.labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
plot.new()
legend("center", legend=c("Positive assoc.", "Negative assoc."),
lty=c(1,1), col=c("forestgreen","orangered"), ncol=2, cex=2, lwd = 6, box.col="white")
}
plot_networks(md_test1)
#'
#' @param obj An object of class \code{mdine}
#' @param v.col
#' @param e.col
#'
#' @export
#'
#' @import igraph
#'
#' @examples ls()
plot_networks <- function(obj, v.col=NULL, e.col=NULL, lay0=layout_in_circle, lay1=layout_in_circle,
lab0="Group 0", lab1="Group 1", scale_line_width=30, vertex.size0=50, vertex.size1=50,
vertex.labs=NULL, vertex.label.cex=NULL) {
if (class(obj) != "mdine") stop("obj must be of class \"mdine\"")
w.adj <- ci2adj(obj, weighted = TRUE)
g0 <- adj2ig(w.adj$adj0, v.col, e.col)
g1 <- adj2ig(w.adj$adj1, v.col, e.col)
if (is.function(lay0)) {
l0 = lay0(g0)
} else {
l0 = lay0
}
if (is.function(lay1)) {
l1 = lay1(g1)
} else {
l1 = lay1
}
if (is.null(E(g0)$weight)) {
lwd0 <- 0
} else {
lwd0 <- abs(E(g0)$weight)*scale_line_width
}
if (is.null(E(g1)$weight)) {
lwd1 <- 0
} else {
lwd1 <- abs(E(g1)$weight)*scale_line_width
}
layout(matrix(c(1,2,3,3), ncol=2, byrow=TRUE), heights=c(6, 1), widths=c(6,6,1.5))
par(mai=rep(0.2, 4))
plot.igraph(g0, layout=l1,
edge.width=lwd0, main=lab0,
vertex.size=vertex.size0, vertex.shape="circle",
vertex.label=vertex.labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
par(mai=rep(0.2, 4))
plot.igraph(g1, layout=l1,
edge.width=lwd1, main=lab1,
vertex.size=vertex.size1, vertex.shape="circle",
vertex.label=vertex.labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
plot.new()
legend("center", legend=c("Positive assoc.", "Negative assoc."),
lty=c(1,1), col=c("forestgreen","orangered"), ncol=2, cex=2, lwd = 6, box.col="white")
}
#'
#' @param obj An object of class \code{mdine}
#' @param v.col
#' @param e.col
#'
#' @export
#'
#' @import igraph
#'
#' @examples ls()
plot_networks <- function(obj, v.col=NULL, e.col=NULL, lay0=layout_in_circle, lay1=layout_in_circle,
lab0="Group 0", lab1="Group 1", scale_line_width=30, vertex.size0=50, vertex.size1=50,
vertex.labs=NULL, vertex.label.cex=NULL) {
if (class(obj) != "mdine") stop("obj must be of class \"mdine\"")
w.adj <- ci2adj(obj, weighted = TRUE)
g0 <- adj2ig(w.adj$adj0, v.col, e.col)
g1 <- adj2ig(w.adj$adj1, v.col, e.col)
if (is.function(lay0)) {
l0 = lay0(g0)
} else {
l0 = lay0
}
if (is.function(lay1)) {
l1 = lay1(g1)
} else {
l1 = lay1
}
if (is.null(E(g0)$weight)) {
lwd0 <- 0
} else {
lwd0 <- abs(E(g0)$weight)*scale_line_width
}
if (is.null(E(g1)$weight)) {
lwd1 <- 0
} else {
lwd1 <- abs(E(g1)$weight)*scale_line_width
}
layout(matrix(c(1,2,3,3), ncol=2, byrow=TRUE), heights=c(5, 2), widths=c(6,6,1.5))
par(mai=rep(0.2, 4))
plot.igraph(g0, layout=l1,
edge.width=lwd0, main=lab0,
vertex.size=vertex.size0, vertex.shape="circle",
vertex.label=vertex.labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
par(mai=rep(0.2, 4))
plot.igraph(g1, layout=l1,
edge.width=lwd1, main=lab1,
vertex.size=vertex.size1, vertex.shape="circle",
vertex.label=vertex.labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
plot.new()
legend("center", legend=c("Positive assoc.", "Negative assoc."),
lty=c(1,1), col=c("forestgreen","orangered"), ncol=2, cex=2, lwd = 6, box.col="white")
}
plot_networks(md_test1)
dev.off()
plot_networks(md_test1)
#'
#' @param obj An object of class \code{mdine}
#' @param v.col
#' @param e.col
#'
#' @export
#'
#' @import igraph
#'
#' @examples ls()
plot_networks <- function(obj, v.col=NULL, e.col=NULL, lay0=layout_in_circle, lay1=layout_in_circle,
lab0="Group 0", lab1="Group 1", scale_line_width=30, vertex.size0=50, vertex.size1=50,
vertex.labs=NULL, vertex.label.cex=NULL) {
if (class(obj) != "mdine") stop("obj must be of class \"mdine\"")
w.adj <- ci2adj(obj, weighted = TRUE)
g0 <- adj2ig(w.adj$adj0, v.col, e.col)
g1 <- adj2ig(w.adj$adj1, v.col, e.col)
if (is.function(lay0)) {
l0 = lay0(g0)
} else {
l0 = lay0
}
if (is.function(lay1)) {
l1 = lay1(g1)
} else {
l1 = lay1
}
if (is.null(E(g0)$weight)) {
lwd0 <- 0
} else {
lwd0 <- abs(E(g0)$weight)*scale_line_width
}
if (is.null(E(g1)$weight)) {
lwd1 <- 0
} else {
lwd1 <- abs(E(g1)$weight)*scale_line_width
}
layout(matrix(c(1,2,3,3), ncol=2, byrow=TRUE), heights=c(5, 2), widths=c(6,6,1.5))
par(mai=rep(0.2, 4))
plot.igraph(g0, layout=l1,
edge.width=lwd0, main=lab0,
vertex.size=vertex.size0, vertex.shape="circle",
vertex.label=vertex.labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
par(mai=rep(0.2, 4))
plot.igraph(g1, layout=l1,
edge.width=lwd1, main=lab1,
vertex.size=vertex.size1, vertex.shape="circle",
vertex.label=vertex.labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
plot.new()
legend("center", legend=c("Positive assoc.", "Negative assoc."),
lty=c(1,1), col=c("forestgreen","orangered"), ncol=2, cex=1, lwd = 6, box.col="white")
}
plot_networks(md_test1)
#'
#' @param obj An object of class \code{mdine}
#' @param v.col
#' @param e.col
#'
#' @export
#'
#' @import igraph
#'
#' @examples ls()
plot_networks <- function(obj, v.col=NULL, e.col=NULL, lay0=layout_in_circle, lay1=layout_in_circle,
lab0="Group 0", lab1="Group 1", scale_line_width=30, vertex.size0=50, vertex.size1=50,
vertex.labs=NULL, vertex.label.cex=NULL) {
if (class(obj) != "mdine") stop("obj must be of class \"mdine\"")
w.adj <- ci2adj(obj, weighted = TRUE)
g0 <- adj2ig(w.adj$adj0, v.col, e.col)
g1 <- adj2ig(w.adj$adj1, v.col, e.col)
if (is.function(lay0)) {
l0 = lay0(g0)
} else {
l0 = lay0
}
if (is.function(lay1)) {
l1 = lay1(g1)
} else {
l1 = lay1
}
if (is.null(E(g0)$weight)) {
lwd0 <- 0
} else {
lwd0 <- abs(E(g0)$weight)*scale_line_width
}
if (is.null(E(g1)$weight)) {
lwd1 <- 0
} else {
lwd1 <- abs(E(g1)$weight)*scale_line_width
}
layout(matrix(c(1,2,3,3), ncol=2, byrow=TRUE), heights=c(5, 2), widths=c(6,6,1.5))
par(mai=rep(0.2, 4))
plot.igraph(g0, layout=l1,
edge.width=lwd0, main=lab0,
vertex.size=vertex.size0, vertex.shape="circle",
vertex.label=vertex.labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
par(mai=rep(0.2, 4))
plot.igraph(g1, layout=l1,
edge.width=lwd1, main=lab1,
vertex.size=vertex.size1, vertex.shape="circle",
vertex.label=vertex.labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
plot.new()
legend("center", legend=c("Positive assoc.", "Negative assoc."),
lty=c(1,1), col=c("forestgreen","orangered"), ncol=2, cex=1.3, lwd = 6, box.col="white")
}
plot_networks(md_test1)
document()
document()
document()
document()
devtools::check()
?devtools::check
devtools::check(remote = TRUE)
devtools::check(remote = TRUE)
document()
devtools::check(remote = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
?vignette
?mdine
library(mdine)
?mdine
parallel::detectCores()
vignette("mdine")
vignette("mdine-vignette")
devtools::build_vignettes()
vignette("mdine")
vignette(package="mdine")
data("crohns")
head(crohns)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
X <- model.matrix(~disease, data=crohns$covars)
X
# Running mdine
md.fit <- mdine(Y=crohns$otu.counts, X=X, Z=X[,2], mc.cores=4, iter=1000)
set.seed(893497)
n=50
n.spec = 5
x = cbind(1, rbinom(n, 1, 0.5))
w = matrix(rnorm(n*n.spec), n, n.spec)
beta = rbind(c(5, 4, 3, 2, 1), c(-1, 1, 0, 1, 2))
exp_part = cbind(exp(x%*%beta+w), 1)
probs = exp_part/rowSums(exp_part)
rd = floor(rnorm(n, 50000, 5000))
counts = matrix(0, n, n.spec+1)
for (i in 1:n) {
counts[i,] = rmultinom(1, rd[i], probs[i,])
}
library(mdine)
md_test1 = mdine(Y = counts, X = x, Z = x[,2], mc.cores = 1, iter = 100)
plot_networks(md_test1)
plotNetworks = function(counts, prec0, prec1, labs=NULL, scale_line_width=30, lay=layout.star,
lab0="Group 0", lab1="Group 1", ci0=NULL, ci1=NULL, vertex.size0=50, vertex.size1=50,
col=NULL, seed=NULL, reorder=NULL, vertex.label.cex=NULL, cutoff=NULL, phyla_names=NULL,...) {
require(igraph)
n.spec = NCOL(counts)
if (is.null(labs)) {
labs = substr(colnames(counts)[-n.spec], 4, nchar(colnames(counts)[-n.spec]))
}
if (is.null(col)) {
col = rainbow(n.spec-1)
}
if (!is.null(seed)) {
set.seed(seed)
}
if (!is.null(ci0) & !is.null(ci1)) {
sig.links0 = ci_to_adj(ci0[[1]],
ci0[[2]])
sig.links1 = ci_to_adj(ci1[[1]],
ci1[[2]])
partial_cor0 = -cov2cor(prec0)*sig.links0
partial_cor1 = -cov2cor(prec1)*sig.links1
} else {
partial_cor0 = -cov2cor(prec0)
partial_cor1 = -cov2cor(prec1)
}
if (!is.null(cutoff)){
partial_cor0[abs(partial_cor0)<cutoff] = 0
partial_cor1[abs(partial_cor1)<cutoff] = 0
}
diag(partial_cor0) = 0
diag(partial_cor1) = 0
palette = categorical_pal(max(col))
control_graph = graph.adjacency(partial_cor0, mode="undirected", weighted=TRUE, diag = FALSE)
E(control_graph)$color[E(control_graph)$weight>0] = "forestgreen"
E(control_graph)$color[E(control_graph)$weight<=0] = "orangered"
V(control_graph)$color = palette[col]
if (is.function(lay)) {
l_control = lay(control_graph)
} else {
l_control = lay
}
case_graph = graph.adjacency(partial_cor1, mode="undirected", weighted=TRUE, diag = FALSE)
E(case_graph)$color[E(case_graph)$weight>0] = "forestgreen"
E(case_graph)$color[E(case_graph)$weight<=0] = "orangered"
V(case_graph)$color = palette[col]
if (is.function(lay)) {
l_case = lay(case_graph, ...)
} else {
l_case = lay
}
unique_col = palette[col[!duplicated((col))]]
layout(matrix(c(1,2,3,1,2,3,4,4,4), ncol=3, byrow=TRUE), heights=c(8, 0.5), widths=c(6,6,2.5,1.5))
par(mai=rep(0.1, 4))
plot(control_graph, layout=l_case,
edge.width=abs(E(control_graph)$weight)*scale_line_width, main=lab0,
vertex.size=vertex.size0, vertex.shape="circle",
vertex.label=labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
par(mai=rep(0.1, 4))
plot(case_graph, layout=l_case,
edge.width=abs(E(case_graph)$weight)*scale_line_width, main=lab1,
vertex.size=vertex.size1, vertex.shape="circle",
vertex.label=labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
plot.new()
par(mai=c(0,0,0,0))
legend("center", legend=phyla_names[!duplicated(phyla_names)], pch = 21, pt.cex=6,
col="black", pt.bg=unique_col, title = "Phylum", cex=1, box.col="white", xjust=1,
y.intersp = 4, x.intersp = 2)
plot.new()
legend("center", legend=c("Positive assoc.", "Negative assoc."),
lty=c(1,1), col=c("forestgreen","orangered"), ncol=2, cex=2, lwd = 6, box.col="white")
return(l_case)
}
plotNetworks(md_test1)
plotNetworks(md_test1$post_mean$invsigma0, md_test1$post_mean$invsigma1)
plotNetworks(counts, md_test1$post_mean$invsigma0, md_test1$post_mean$invsigma1)
plot_networks(md_test1)
#' @param vertex.size Scaling factor for vertex size
#' @param vertex.labs Character vector containing vertex labels
#' @param vertex.label.cex Scaling factor for vertex labels
#'
#' @export
#'
#' @importFrom igraph plot.igraph E layout_in_circle
#' @importFrom graphics layout legend par plot.new
#'
#' @examples ls()
plot_networks <- function(obj, v.col=NULL, e.col=NULL, lay0=layout_in_circle, lay1=layout_in_circle,
lab0="Group 0", lab1="Group 1", scale_line_width=30, vertex.size=50,
vertex.labs=NULL, vertex.label.cex=NULL) {
if (class(obj) != "mdine") stop("obj must be of class \"mdine\"")
w.adj <- ci2adj(obj, weighted = TRUE)
g0 <- adj2ig(w.adj$adj0, v.col, e.col)
g1 <- adj2ig(w.adj$adj1, v.col, e.col)
if (is.function(lay0)) {
l0 = lay0(g0)
} else {
l0 = lay0
}
if (is.function(lay1)) {
l1 = lay1(g1)
} else {
l1 = lay1
}
if (is.null(igraph::E(g0)$weight)) {
lwd0 <- 0
} else {
lwd0 <- abs(igraph::E(g0)$weight)*scale_line_width
}
if (is.null(igraph::E(g1)$weight)) {
lwd1 <- 0
} else {
lwd1 <- abs(igraph::E(g1)$weight)*scale_line_width
}
layout(matrix(c(1,2,3,3), ncol=2, byrow=TRUE), heights=c(5, 2), widths=c(6,6,1.5))
par(mai=rep(0.2, 4))
igraph::plot.igraph(g0, layout=l1,
edge.width=lwd0, main=lab0,
vertex.size=vertex.size, vertex.shape="circle",
vertex.label=vertex.labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
par(mai=rep(0.2, 4))
igraph::plot.igraph(g1, layout=l1,
edge.width=lwd1, main=lab1,
vertex.size=vertex.size, vertex.shape="circle",
vertex.label=vertex.labs, vertex.label.color="black", vertex.label.cex=vertex.label.cex)
plot.new()
legend("center", legend=c("Positive assoc.", "Negative assoc."),
lty=c(1,1), col=c("forestgreen","orangered"), ncol=2, cex=1.3, lwd = 6, box.col="white")
}
plot_networks(md_test1)
md_test1$post_mean$invsigma0
ci2adj(md_test1$ci)
ci2adj(md_test1$ci$invsigma0)
ci2adj(md_test1)
debugSource('~/my_packages/mdine/R/post_functions.R', echo=TRUE)
ci2adj(md_test1)
ci2adj(md_test1$ci)
ci2adj(md_test1)
plot_networks(md_test1)
source('~/my_packages/mdine/R/post_functions.R', echo=TRUE)
plot_networks(md_test1)
gc()
detach("package:mdine", unload = TRUE)
remove.packages("mdine")
devtools::install_github("kevinmcgregor/mdine")
set.seed(893497)
n=100
n.spec = 5
x = cbind(1, rbinom(n, 1, 0.5))
w = matrix(rnorm(n*n.spec), n, n.spec)
beta = rbind(c(5, 4, 3, 2, 1), c(-1, 1, 0, 1, 2))
exp_part = cbind(exp(x%*%beta+w), 1)
probs = exp_part/rowSums(exp_part)
rd = floor(rnorm(n, 50000, 5000))
counts = matrix(0, n, n.spec+1)
for (i in 1:n) {
counts[i,] = rmultinom(1, rd[i], probs[i,])
}
library(mdine)
md_test1 = mdine(Y = counts, X = x, Z = x[,2], mc.cores = 1, iter = 100)
md_test1$post_mean$invsigma0
md_test1$post_mean$invsigma1
plot_networks(md_test1)
set.seed(893497)
n=50
n.spec = 5
x = cbind(1, rbinom(n, 1, 0.5))
w = matrix(rnorm(n*n.spec), n, n.spec)
beta = rbind(c(5, 4, 3, 2, 1), c(-1, 1, 0, 1, 2))
exp_part = cbind(exp(x%*%beta+w), 1)
probs = exp_part/rowSums(exp_part)
rd = floor(rnorm(n, 50000, 5000))
counts = matrix(0, n, n.spec+1)
for (i in 1:n) {
counts[i,] = rmultinom(1, rd[i], probs[i,])
}
library(mdine)
md_test1 = mdine(Y = counts, X = x, Z = x[,2], mc.cores = 1, iter = 100)
plot_networks(md_test1)
gc()
detach("package:mdine", unload = TRUE)
remove.packages("mdine")
devtools::install_github("kevinmcgregor/mdine")
vignette("mdine")
vignette(package="mdine")
library(mdine)
vignette()
vignette("MDiNE Vignette")
vignette("MDiNE Vignette", package = "mdine")
vignette("MDiNE Vignette", package = mdine)
vignette(package="mdine")
library(devtools)
build_vignettes()
?build_vignettes
detach("package:mdine", unload = TRUE)
remove.packages("mdine")
install_github("kevinmcgregor/mdine")
library(mdine)
vignette(package="mdine")
detach("package:mdine", unload = TRUE)
remove.packages("mdine")
install_github("kevinmcgregor/mdine")
vignette(package="mdine")
library(mdine)
vignette("mdine")
install_github("kevinmcgregor/mdine", build_vignettes=TRUE)
remove.packages("mdine")
install_github("kevinmcgregor/mdine", build_vignettes=TRUE)
vignette(package="mdine")
library(mdine)
vignette(package="mdine")
browseVignettes("mdine")
detach("package:mdine", unload = TRUE)
remove.packages("mdine")
library(mdine)
browseVignettes()
browseVignettes("mdine")
vignette(package="mdine")
vignette("MDiNE Vignette")
vignette("MDiNE Vignette", package="mdine")
vignette("mdine")
browseVignettes("mdine")
